# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

controller:
  tag: 2.249.3-lts
  adminUser: admin
  adminPassword: admin
  componentName: "jenkins-controller"
  image: "jenkins/jenkins"
  tagLabel: jdk11
  imagePullPolicy: "Always"
  disableRememberMe: false
  executorMode: "NORMAL"

  resources:
    requests:
      cpu: "50m"
      memory: "256Mi"
    limits:
      cpu: "200m"
      memory: "4096Mi"
  
  initContainerEnv:
    - name: JENKINS_UC_DOWNLOAD
      value: http://ftp-nyc.osuosl.org/pub/jenkins

  initContainerResources:
    requests:
      cpu: "50m"
      memory: "256Mi"
    limits:
      cpu: "200m"
      memory: "4096Mi"

  containerEnv:
    - name: PROJECT_ID
      valueFrom:
        secretKeyRef:
            name: jenkins-k8s-config
            key: project_id
    - name: GITHUB_REPO
      valueFrom:
        secretKeyRef:
            name: github-secrets
            key: github_repo
    - name: GITHUB_USERNAME
      valueFrom:
        secretKeyRef:
            name: github-secrets
            key: github_username
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
            name: github-secrets
            key: github_token
    - name: jenkins_tf_ksa
      valueFrom:
        secretKeyRef:
            name: jenkins-k8s-config
            key: jenkins_tf_ksa
  servicePort: 80
  serviceType: LoadBalancer
  installPlugins:
      - kubernetes:1.31.3
      - workflow-aggregator:2.6
      - git:4.10.2
      - configuration-as-code:1.55.1
  JCasC:
    enabled: true
    configScripts:
        cloud: |
            jenkins:
                clouds:
                    - kubernetes:
                        name: "gke-executors"
                        serverUrl: "https://kubernetes.default"
                        jenkinsTunnel: "jenkins-agent:50000"
                        jenkinsUrl: "http://jenkins:80"
                        skipTlsVerify: true
                        namespace: "default"
                        templates:
                            - name: "jenkins-jnlp"
                              namespace: "default"
                              nodeUsageMode: NORMAL
                              label: "jnlp-exec"
                              containers:
                                - name: "jnlp"
                                  image: "jenkins/jnlp-slave"
                                  alwaysPullImage: false
                                  workingDir: "/home/jenkins/agent"
                                  ttyEnabled: true
                                  command: ""
                                  args: ""
                                  resourceRequestCpu: "500m"
                                  resourceLimitCpu: "1000m"
                                  resourceRequestMemory: "1Gi"
                                  resourceLimitMemory: "2Gi"
                              volumes:
                                - emptyDirVolume:
                                    memory: false
                                    mountPath: "/tmp"
                              idleMinutes: "1"
                              activeDeadlineSeconds: "120"
                              slaveConnectTimeout: "1000"
                            - name: "terraform"
                              namespace: "default"
                              nodeUsageMode: NORMAL
                              serviceAccount: ${jenkins_tf_ksa}
                              label: "terraform-exec"
                              containers:
                                - name: "terraform"
                                  image: "hashicorp/terraform:1.1.5"
                                  alwaysPullImage: false
                                  workingDir: "/home/jenkins/agent"
                                  ttyEnabled: true
                                  command: "/bin/sh -c"
                                  args: "cat"
                                  resourceRequestCpu: "100m"
                                  resourceLimitCpu: "500m"
                                  resourceRequestMemory: "500Mi"
                                  resourceLimitMemory: "1Gi"
                              volumes:
                                - emptyDirVolume:
                                    memory: false
                                    mountPath: "/tmp"
                              podRetention: "never"
                              activeDeadlineSeconds: "300"
                              slaveConnectTimeout: "1000"
        credentials: |
            credentials:
                system:
                    domainCredentials:
                    - credentials:
                        - usernamePassword:
                            scope: GLOBAL
                            id: "github-token"
                            username: ${GITHUB_USERNAME}
                            password: ${GITHUB_TOKEN}
                            description: "Github personal token"
        init-jobs: |
            jobs:
              - script: >
                    multibranchPipelineJob('0-bootstrap') {
                        factory {
                        workflowBranchProjectFactory {
                            scriptPath('landing-zone-pipelines/Jenkinsfile')
                        }
                        }
                        branchSources {
                        github {
                            id('12312313')
                            scanCredentialsId('github-token')
                            repoOwner("${GITHUB_USERNAME}")
                            repository("${GITHUB_REPO}")
                            buildOriginBranch(true)
                            buildOriginPRMerge(true)
                            includes("dev")
                        }
                        }
                        orphanedItemStrategy {
                        discardOldItems {
                            numToKeep(10)
                        }
                        }
                        triggers {
                        periodic(1)
                        }
                     }
            jobs:
              - script: >
                    multibranchPipelineJob('1-org') {
                        factory {
                        workflowBranchProjectFactory {
                            scriptPath('landing-zone-pipelines/Jenkinsfile')
                        }
                        }
                        branchSources {
                        github {
                            id('12312313')
                            scanCredentialsId('github-token')
                            repoOwner("${GITHUB_USERNAME}")
                            repository("${GITHUB_REPO}")
                            buildOriginBranch(true)
                            buildOriginPRMerge(true)
                            includes("dev")
                        }
                        }
                        orphanedItemStrategy {
                        discardOldItems {
                            numToKeep(10)
                        }
                        }
                        triggers {
                        periodic(1)
                        }
                    }
            jobs:
              - script: >
                    multibranchPipelineJob('2-environments') {
                        factory {
                        workflowBranchProjectFactory {
                            scriptPath('landing-zone-pipelines/Jenkinsfile')
                        }
                        }
                        branchSources {
                        github {
                            id('12312313')
                            scanCredentialsId('github-token')
                            repoOwner("${GITHUB_USERNAME}")
                            repository("${GITHUB_REPO}")
                            buildOriginBranch(true)
                            buildOriginPRMerge(true)
                            includes("dev")
                        }
                        }
                        orphanedItemStrategy {
                        discardOldItems {
                            numToKeep(10)
                        }
                        }
                        triggers {
                        periodic(1)
                        }
                    }
